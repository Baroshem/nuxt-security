import { defineNitroPlugin } from '#imports'
import { resolveSecurityRules } from '../context'
import type { ContentSecurityPolicyValue } from '../../../types/headers'
import { useLogger } from '@nuxt/kit'

/**
 * This plugin updates the CSP directives with the nonce and hashes generated by the server.
 */
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('render:html', (response, { event }) => {
    const rules = resolveSecurityRules(event)
    if (rules.enabled && rules.headers) {
      const headers = rules.headers
      
      if (headers.contentSecurityPolicy) {
        const csp = headers.contentSecurityPolicy
        const nonce = event.context.security?.nonce
        const scriptHashes = event.context.security?.hashes?.script
        const styleHashes = event.context.security?.hashes?.style
        headers.contentSecurityPolicy = updateCspVariables(csp, nonce, scriptHashes, styleHashes)
      }
    }
  })
})

function updateCspVariables(csp: ContentSecurityPolicyValue, nonce?: string, scriptHashes?: Set<string>, styleHashes?: Set<string>) {
  const logger = useLogger('nuxt-security')

  const generatedCsp = <ContentSecurityPolicyValue>Object.fromEntries(Object.entries(csp).map(([directive, value]) => {
    // Return boolean values unchanged
    if (typeof value === 'boolean') {
      return [directive, value]
    }
    // Make sure nonce placeholders are eliminated
    const sources = (typeof value === 'string') ? value.split(' ').map(token => token.trim()).filter(token => token) : value
    const modifiedSources = sources
      .filter(source => {
        if (source.startsWith("'nonce-") && source !== "'nonce-{{nonce}}'") {
          logger.warn('Removing static nonce from CSP header.')
          return false
        }
        return true
      })
      .map(source => {
        if (source === "'nonce-{{nonce}}'") {
          return nonce ? `'nonce-${nonce}'` : ''
        } else {
          return source
        }
      })
      .filter(source => source)
    
    if (directive === 'script-src' && scriptHashes) {
      modifiedSources.push(...scriptHashes)
    }
    if (directive === 'style-src' && styleHashes) {
      modifiedSources.push(...styleHashes)
    }

    return [directive, modifiedSources]
  }))
  return generatedCsp
}

